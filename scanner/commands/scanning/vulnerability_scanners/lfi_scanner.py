"""
ReconScan LFI Scanner

Local File Inclusion vulnerability detection module.
"""

import asyncio
import aiohttp
import urllib.parse
from ..payloads.lfi_payloads import LFIPayloads

class LFIScanner:
    """Local File Inclusion vulnerability scanner."""
    
    def __init__(self):
        """Initialize LFI scanner."""
        # Initialize payload library
        self.payload_library = LFIPayloads()
        
        # Get payloads from library (using medium severity by default)
        self.payloads = self.payload_library.get_targeted_payloads('medium')
        
        # Get success indicators from library
        self.lfi_indicators = self.payload_library.get_success_indicators()
    
    async def scan(self, session, target, config=None, verbose=True):
        """Perform LFI vulnerability scan."""
        if verbose:
            print("  → Testing LFI payloads...")
        
        vulnerabilities = []
        vulnerabilities_found = 0
        consecutive_errors = 0
        max_consecutive_errors = 5
        
        for payload in self.payloads:
            try:
                test_url = f"{target}?file={urllib.parse.quote(payload)}"
                
                timeout = 10
                if config:
                    timeout = config.get('network', {}).get('timeout', 10)
                
                async with session.get(test_url, timeout=aiohttp.ClientTimeout(total=timeout)) as response:
                    content = await response.text()
                    consecutive_errors = 0
                    
                    if any(indicator in content for indicator in self.lfi_indicators):
                        vulnerability = {
                            'type': 'Local File Inclusion (LFI)',
                            'severity': 'High',
                            'url': test_url,
                            'payload': payload,
                            'description': 'LFI vulnerability detected through file content disclosure'
                        }
                        vulnerabilities.append(vulnerability)
                        vulnerabilities_found += 1
                        if verbose:
                            print(f"    ✗ LFI vulnerability found: {payload}")
                        break
                        
            except asyncio.TimeoutError:
                consecutive_errors += 1
                if verbose and consecutive_errors <= max_consecutive_errors:
                    print(f"    ! Timeout testing LFI payload (error {consecutive_errors})")
                if consecutive_errors >= max_consecutive_errors:
                    if verbose:
                        print("    ! Too many consecutive timeouts, stopping LFI scan...")
                    break
            except Exception as e:
                consecutive_errors += 1
                if verbose and consecutive_errors <= max_consecutive_errors:
                    print(f"    ! Error testing payload '{payload[:30]}...': {str(e)}")
                if consecutive_errors >= max_consecutive_errors:
                    if verbose:
                        print("    ! Too many consecutive errors, stopping LFI scan...")
                    break
                    
            # Add small delay between requests
            if config:
                delay = config.get('scanning', {}).get('delay', 0.5)
                await asyncio.sleep(delay)
        
        if verbose and vulnerabilities_found == 0:
            print("    ✓ No LFI vulnerabilities detected")
        
        return vulnerabilities 