"""
ReconScan Directory Traversal Scanner

Directory traversal vulnerability detection module.
"""

import urllib.parse
from .directory_traversal_payloads import DirectoryTraversalPayloads
from scanner.ai import AIVulnerabilityValidator

class DirectoryTraversalScanner:
    """Directory traversal vulnerability scanner."""
    
    def __init__(self, ai_validator=None):
        """Initialize directory traversal scanner with AI validation."""
        # Initialize payload library
        self.payload_library = DirectoryTraversalPayloads()
        
        # Get payloads from library (using medium severity by default)
        self.payloads = self.payload_library.get_targeted_payloads('medium')
        
        # Get success indicators from library
        self.traversal_indicators = self.payload_library.get_success_indicators()
        
        # Initialize AI validator
        self.ai_validator = ai_validator or AIVulnerabilityValidator()
    
    async def scan(self, session, target, verbose=True):
        """Perform directory traversal vulnerability scan."""
        if verbose:
            print("  \033[1;38;5;28m→\033[0m Testing directory traversal...")
        
        vulnerabilities = []
        vulnerabilities_found = 0
        
        for payload in self.payloads:
            try:
                test_url = f"{target}?path={urllib.parse.quote(payload)}"
                
                async with session.get(test_url) as response:
                    content = await response.text()
                    
                    if any(indicator in content for indicator in self.traversal_indicators):
                        # Use AI validation for directory traversal assessment
                        ai_result = self.ai_validator.validate_file_inclusion(
                            test_url, 'path', payload, content, 
                            dict(response.headers), response.status, 0.0, 'directory_traversal'
                        )
                        
                        # If AI determines it's not vulnerable, skip
                        if ai_result.get('is_vulnerable') is False:
                            if verbose:
                                print(f"    \033[1;94mAI\033[0m Directory traversal filtered (confidence: {ai_result.get('confidence', 0):.2f}): {payload}")
                                print(f"      Reason: {ai_result.get('reason', 'AI analysis')}")
                            continue
                        
                        vulnerability = {
                            'type': 'Directory Traversal',
                            'severity': 'High',
                            'url': test_url,
                            'payload': payload,
                            'description': 'Directory traversal vulnerability detected',
                            'ai_confidence': ai_result.get('confidence', 0.0),
                            'ai_confidence_level': ai_result.get('confidence_level', 'unknown'),
                            'ai_recommendation': ai_result.get('recommendation', 'Manual verification recommended')
                        }
                        vulnerabilities.append(vulnerability)
                        vulnerabilities_found += 1
                        if verbose:
                            print(f"    \033[1;91mX\033[0m Directory traversal found: {payload} (AI confidence: {ai_result.get('confidence', 0):.2f})")
                        break
                        
            except Exception as e:
                if verbose:
                                            print(f"    \033[1;91mWarning\033[0m: Error testing payload '{payload}': {str(e)}")
                continue
        
        if verbose and vulnerabilities_found == 0:
            print("    ✓ No directory traversal vulnerabilities detected")
        
        return vulnerabilities 