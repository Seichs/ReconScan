"""
ReconScan XSS Scanner

Cross-Site Scripting (XSS) vulnerability detection module.
Supports reflected, stored, and DOM-based XSS detection with AI-powered false positive filtering.
"""

import urllib.parse
from ...ai_classifier import AIVulnerabilityClassifier, VulnerabilityContext, VulnerabilityType
from ..payloads.xss_payloads import XSSPayloads

class XSSScanner:
    """XSS vulnerability scanner with AI-powered false positive detection."""
    
    def __init__(self):
        """Initialize XSS scanner with AI classifier."""
        # Initialize payload library
        self.payload_library = XSSPayloads()
        
        # Get payloads from library (using medium severity by default)
        self.payloads = self.payload_library.get_payloads_by_severity('medium')[:15]
        
        # Common parameters for XSS testing
        self.parameters = [
            'q', 'search', 'query', 'name', 'comment', 'message', 'input', 'data',
            'text', 'content', 'value', 'term', 'keyword', 'description', 'title'
        ]
        
        # Initialize AI classifier for false positive detection
        self.ai_classifier = AIVulnerabilityClassifier()
    
    async def scan(self, session, target, verbose=True):
        """Perform XSS vulnerability scan with AI-powered analysis."""
        if verbose:
            print("  → Testing XSS payloads with AI analysis...")
        
        vulnerabilities = []
        vulnerabilities_found = 0
        false_positives_filtered = 0
        
        # Use top priority parameters for XSS testing (most likely to be vulnerable)
        priority_params = ['q', 'search', 'query', 'name', 'comment', 'message', 'input', 'data']
        test_params = priority_params + [p for p in self.parameters[:10] if p not in priority_params]
        
        for param in test_params:
            for payload in self.payloads[:8]:  # Test first 8 most effective payloads
                try:
                    # Create test URL with payload
                    test_url = f"{target}?{param}={urllib.parse.quote(payload)}"
                    
                    # Record start time for response timing analysis
                    import time
                    start_time = time.time()
                    
                    # Send request
                    async with session.get(test_url) as response:
                        response_time = time.time() - start_time
                        response_body = await response.text()
                        response_headers = dict(response.headers)
                        status_code = response.status
                    
                    # Check if payload is reflected in response
                    if payload in response_body:
                        # Create context for AI analysis
                        context = VulnerabilityContext(
                            payload=payload,
                            response_body=response_body,
                            response_headers=response_headers,
                            status_code=status_code,
                            response_time=response_time,
                            parameter_name=param,
                            injection_point=test_url,
                            vulnerability_type=VulnerabilityType.XSS_REFLECTED
                        )
                        
                        # Use AI classifier to analyze the vulnerability
                        classification = self.ai_classifier.classify_vulnerability(context)
                        
                        if classification.is_vulnerable:
                            # AI confirms this is a real vulnerability
                            vulnerabilities_found += 1
                            vulnerability_info = {
                                'type': 'XSS (Reflected)',
                                'severity': self._determine_severity(classification),
                                'url': test_url,
                                'parameter': param,
                                'payload': payload,
                                'description': f"XSS payload reflected in parameter '{param}' with {classification.confidence_level.name.lower()} confidence",
                                'ai_analysis': {
                                    'confidence': classification.confidence,
                                    'confidence_level': classification.confidence_level.name,
                                    'execution_context': classification.execution_context,
                                    'risk_factors': classification.risk_factors,
                                    'mitigation_evidence': classification.mitigation_evidence,
                                    'recommendation': classification.recommendation
                                },
                                'evidence': response_body[:200] + "..." if len(response_body) > 200 else response_body
                            }
                            vulnerabilities.append(vulnerability_info)
                            
                            if verbose:
                                print(f"    ✓ XSS found: {param}={payload[:30]}... (AI Confidence: {classification.confidence:.2f})")
                                print(f"      Context: {classification.execution_context}")
                                if classification.risk_factors:
                                    print(f"      Risk factors: {', '.join(classification.risk_factors[:2])}")
                        else:
                            # AI determined this is a false positive
                            false_positives_filtered += 1
                            if verbose and classification.confidence < 0.3:
                                print(f"    ✗ False positive filtered: {param}={payload[:20]}... (Reason: {classification.reasons[0] if classification.reasons else 'Low confidence'})")
                
                except Exception as e:
                    if verbose:
                        print(f"    ! Error testing {param}: {str(e)[:50]}...")
                    continue
        
        if verbose:
            print(f"  → XSS scan completed: {vulnerabilities_found} confirmed, {false_positives_filtered} false positives filtered")
        
        return vulnerabilities
    
    def _determine_severity(self, classification):
        """Determine vulnerability severity based on AI analysis."""
        if classification.confidence >= 0.9:
            return "Critical"
        elif classification.confidence >= 0.75:
            return "High" 
        elif classification.confidence >= 0.6:
            return "Medium"
        else:
            return "Low" 