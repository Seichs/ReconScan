"""
ReconScan XSS Scanner

Dedicated module for Cross-Site Scripting vulnerability detection.
Supports reflected, stored, and DOM-based XSS detection.
"""

import urllib.parse
from ..payloads.xss_payloads import XSSPayloads

class XSSScanner:
    """Cross-Site Scripting vulnerability scanner with advanced payload testing."""
    
    def __init__(self, false_positive_filters=None, system_config=None):
        """Initialize XSS scanner."""
        self.false_positive_filters = false_positive_filters
        self.system_config = system_config
        
        # Initialize payload library
        self.payload_library = XSSPayloads()
        
        # Get payloads from library (using medium severity by default)
        self.payloads = self.payload_library.get_targeted_payloads('medium')
        
        # Common parameter names for XSS testing
        self.parameters = self.payload_library.get_common_parameters()
    
    async def scan(self, session, target, verbose=True):
        """Perform XSS vulnerability scan with optimized parameter testing."""
        if verbose:
            print("  â†’ Testing XSS payloads...")
        
        vulnerabilities = []
        vulnerabilities_found = 0
        
        # Use top priority parameters for XSS testing (most likely to be vulnerable)
        priority_params = ['q', 'search', 'query', 'name', 'comment', 'message', 'input', 'data']
        test_params = priority_params + [p for p in self.parameters[:10] if p not in priority_params]
        
        for param in test_params:
            for payload in self.payloads[:8]:  # Test first 8 most effective payloads
                try:
                    # Test with different parameters
                    test_url = f"{target}?{param}={urllib.parse.quote(payload)}"
                    
                    async with session.get(test_url) as response:
                        content = await response.text()
                        
                        # Check if payload is reflected in response (various encodings)
                        payload_variations = [
                            payload,
                            payload.replace("'", "&#x27;"),
                            payload.replace("'", "&#39;"),
                            payload.replace("\"", "&quot;"),
                            payload.replace("<", "&lt;"),
                            payload.replace(">", "&gt;"),
                            payload.replace("&", "&amp;"),
                            payload.lower(),
                            payload.upper()
                        ]
                        
                        # Enhanced reflection detection
                        reflection_found = False
                        reflected_payload = None
                        
                        for variation in payload_variations:
                            if variation in content:
                                reflection_found = True
                                reflected_payload = variation
                                break
                        
                        if reflection_found:
                            # Check if this is a known false positive (if filtering is enabled)
                            if self._is_false_positive_filtering_enabled() and self.false_positive_filters:
                                fp_result = self.false_positive_filters.is_xss_false_positive(test_url, param, payload)
                                if fp_result:
                                    if verbose:
                                        print(f"     XSS pattern filtered ({fp_result['ai_label']}): {param}={payload}")
                                        print(f"       Reason: {fp_result['reason']}")
                                    continue
                            
                            # Determine if payload is likely to execute (context analysis)
                            execution_likely = self._analyze_xss_context(content, reflected_payload, payload)
                            
                            vulnerability = {
                                'type': 'Cross-Site Scripting (XSS)',
                                'severity': 'High' if execution_likely else 'Medium',
                                'url': test_url,
                                'payload': payload,
                                'description': f'XSS vulnerability detected in parameter "{param}" - payload reflected {"with likely execution" if execution_likely else "but may be filtered"}'
                            }
                            vulnerabilities.append(vulnerability)
                            vulnerabilities_found += 1
                            if verbose:
                                execution_status = "likely executable" if execution_likely else "reflected (filtered)"
                                print(f"     XSS vulnerability found: {param}={payload} ({execution_status})")
                            break
                            
                except Exception as e:
                    if verbose:
                        print(f"    ! Error testing {param} with '{payload}': {str(e)}")
                    continue
            
            # If found vulnerability in this parameter, test a few more payloads for completeness
            if vulnerabilities_found > 0:
                break
        
        if verbose and vulnerabilities_found == 0:
            print("     No XSS vulnerabilities detected")
        
        return vulnerabilities
    
    def _analyze_xss_context(self, content, reflected_payload, original_payload):
        """
        Analyze the context where XSS payload is reflected to determine execution likelihood.
        
        Args:
            content (str): Response content
            reflected_payload (str): The actual reflected payload variation
            original_payload (str): Original payload sent
            
        Returns:
            bool: True if payload is likely to execute, False if filtered/encoded
        """
        # If original payload is reflected unchanged, likely executable
        if original_payload in content:
            return True
        
        # Check for common XSS contexts that indicate potential execution
        dangerous_contexts = [
            f'value="{reflected_payload}"',  # In input value
            f"value='{reflected_payload}'",  # In input value (single quotes)
            f'>{reflected_payload}<',        # Between HTML tags
            f'javascript:{reflected_payload}', # In javascript: URL
            f'<script>{reflected_payload}',   # In script tag
            f'on{reflected_payload}',         # In event handler
        ]
        
        # If payload appears in dangerous context, likely executable
        for context in dangerous_contexts:
            if context.lower() in content.lower():
                return True
        
        # If payload is heavily encoded/filtered, less likely to execute
        if reflected_payload != original_payload and ('&lt;' in reflected_payload or '&gt;' in reflected_payload):
            return False
        
        # Default to medium confidence
        return True
    
    def _is_false_positive_filtering_enabled(self):
        """Check if false positive filtering is enabled in configuration."""
        if not self.system_config:
            return True
        
        xss_config = self.system_config.get_payload_defaults('xss')
        return xss_config.get('false_positive_filtering', True) 