"""
ReconScan Security Headers Scanner

Security headers analysis module.
"""

class SecurityHeadersScanner:
    """Security headers analysis scanner."""
    
    def __init__(self):
        """Initialize security headers scanner."""
        self.security_headers = {
            'X-Frame-Options': 'Clickjacking protection',
            'X-XSS-Protection': 'XSS filtering',
            'X-Content-Type-Options': 'MIME sniffing protection',
            'Content-Security-Policy': 'Content Security Policy',
            'Strict-Transport-Security': 'HTTPS enforcement',
            'Referrer-Policy': 'Referrer information control',
            'Feature-Policy': 'Feature access control'
        }
    
    async def scan(self, session, target, verbose=True):
        """Perform security headers analysis."""
        if verbose:
            print("  â†’ Analyzing security headers...")
        
        vulnerabilities = []
        
        try:
            async with session.get(target) as response:
                headers = response.headers
                missing_headers = []
                
                for header, description in self.security_headers.items():
                    if header not in headers:
                        missing_headers.append(f"{header} ({description})")
                
                # Create single vulnerability for all missing headers
                if missing_headers:
                    vulnerability = {
                        'type': 'Missing Security Headers',
                        'severity': 'Low',
                        'url': target,
                        'payload': f"Missing {len(missing_headers)} headers",
                        'description': f'Missing security headers: {", ".join(missing_headers)}'
                    }
                    vulnerabilities.append(vulnerability)
                    
                    if verbose:
                        print(f"     Missing {len(missing_headers)} security headers")
                else:
                    if verbose:
                        print("     All important security headers present")
                        
        except Exception as e:
            if verbose:
                print(f"    ! Error analyzing headers: {str(e)}")
        
        return vulnerabilities 