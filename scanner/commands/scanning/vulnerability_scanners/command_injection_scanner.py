"""
ReconScan Command Injection Scanner

Command injection vulnerability detection module.
"""

import urllib.parse

class CommandInjectionScanner:
    """Command injection vulnerability scanner."""
    
    def __init__(self):
        """Initialize command injection scanner."""
        self.payloads = [
            "; ls",
            "| whoami",
            "&& id",
            "; cat /etc/passwd",
            "| ping -c 1 127.0.0.1",
            "&& echo 'command_injection_test'"
        ]
        
        self.cmd_indicators = [
            'uid=', 'gid=', 'root:x:0:0:', 'PING',
            'command_injection_test', 'total 0'
        ]
    
    async def scan(self, session, target, verbose=True):
        """Perform command injection vulnerability scan."""
        if verbose:
            print("  → Testing command injection payloads...")
        
        vulnerabilities = []
        vulnerabilities_found = 0
        
        for payload in self.payloads:
            try:
                test_url = f"{target}?cmd={urllib.parse.quote(payload)}"
                
                async with session.get(test_url) as response:
                    content = await response.text()
                    
                    if any(indicator in content for indicator in self.cmd_indicators):
                        vulnerability = {
                            'type': 'Command Injection',
                            'severity': 'Critical',
                            'url': test_url,
                            'payload': payload,
                            'description': 'Command injection vulnerability detected through command execution'
                        }
                        vulnerabilities.append(vulnerability)
                        vulnerabilities_found += 1
                        if verbose:
                            print(f"     Command injection found: {payload}")
                        break
                        
            except Exception as e:
                if verbose:
                    print(f"    ! Error testing payload '{payload}': {str(e)}")
                continue
        
        if verbose and vulnerabilities_found == 0:
            print("    ✓ No command injection vulnerabilities detected")
        
        return vulnerabilities 