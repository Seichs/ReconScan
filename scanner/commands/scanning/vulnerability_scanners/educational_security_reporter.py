"""
ReconScan Educational Security Reporter

Comprehensive educational reporting system that transforms vulnerability findings into 
actionable learning experiences. This reporter goes beyond simple vulnerability listings
to provide detailed explanations, impact analysis, remediation guidance, and educational
content to help developers and security teams improve their security posture.

Key Features:
- Detailed vulnerability explanations with real-world context
- Impact analysis with business risk assessment
- Step-by-step remediation guidance
- Code examples and secure coding practices
- Educational content and learning resources
- Risk prioritization and treatment recommendations
- Compliance mapping (OWASP, CWE, CVE references)
- Interactive learning elements and knowledge checks

Author: ReconScan Security Framework
Version: 1.0.0
"""

import json
import os
import html
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum
import base64

class SeverityLevel(Enum):
    """Vulnerability severity levels with risk scoring."""
    CRITICAL = {"score": 10.0, "color": "#DC2626", "priority": "Immediate"}
    HIGH = {"score": 8.0, "color": "#EA580C", "priority": "Urgent"}  
    MEDIUM = {"score": 5.0, "color": "#D97706", "priority": "Important"}
    LOW = {"score": 2.0, "color": "#059669", "priority": "Minor"}
    INFO = {"score": 0.0, "color": "#0284C7", "priority": "Informational"}

class VulnerabilityCategory(Enum):
    """Vulnerability categories with educational focus."""
    SQL_INJECTION = "sql_injection"
    XSS = "xss"
    COMMAND_INJECTION = "command_injection"
    DIRECTORY_TRAVERSAL = "directory_traversal"
    LFI = "local_file_inclusion"
    SECURITY_HEADERS = "security_headers"
    AUTHENTICATION = "authentication"
    AUTHORIZATION = "authorization"
    CONFIGURATION = "configuration"
    INFORMATION_DISCLOSURE = "information_disclosure"

@dataclass
class LearningResource:
    """Educational resource for vulnerability understanding."""
    title: str
    description: str
    url: str
    resource_type: str  # "documentation", "tutorial", "course", "tool"
    difficulty: str     # "beginner", "intermediate", "advanced"

@dataclass
class CodeExample:
    """Code example showing vulnerability and fix."""
    language: str
    vulnerable_code: str
    secure_code: str
    explanation: str

@dataclass
class RemediationStep:
    """Detailed remediation step with guidance."""
    step_number: int
    title: str
    description: str
    code_example: Optional[CodeExample] = None
    priority: str = "medium"  # "critical", "high", "medium", "low"
    effort: str = "medium"    # "low", "medium", "high"
    tools_needed: List[str] = field(default_factory=list)

@dataclass
class EducationalVulnerability:
    """Enhanced vulnerability with educational content."""
    # Basic vulnerability info
    id: str
    name: str
    category: VulnerabilityCategory
    severity: SeverityLevel
    confidence: float
    
    # Location and technical details
    url: str
    parameter: str
    method: str
    payload: str
    evidence: str
    
    # Educational content
    description: str
    technical_explanation: str
    business_impact: str
    attack_scenarios: List[str]
    remediation_steps: List[RemediationStep]
    code_examples: List[CodeExample] = field(default_factory=list)
    learning_resources: List[LearningResource] = field(default_factory=list)
    
    # Compliance and standards
    owasp_category: str = ""
    cwe_id: str = ""
    cvss_score: float = 0.0
    
    # Risk assessment
    exploitability: str = "medium"  # "low", "medium", "high"
    prevalence: str = "common"      # "rare", "uncommon", "common", "widespread"
    detectability: str = "easy"     # "hard", "medium", "easy"
    
    # Learning elements - only generate if enabled
    knowledge_check: Dict[str, Any] = field(default_factory=dict)
    hands_on_exercise: Optional[str] = None

@dataclass
class SecurityReportConfig:
    """Configuration for professional security reports."""
    include_executive_summary: bool = True
    include_technical_details: bool = True
    include_remediation_guide: bool = True
    include_learning_resources: bool = True
    include_code_examples: bool = True
    include_compliance_mapping: bool = True
    include_risk_matrix: bool = True
    include_knowledge_checks: bool = False  # Disabled for professional reports
    format_types: List[str] = field(default_factory=lambda: ["html", "json", "markdown"])
    education_level: str = "professional"  # Changed to professional

class EducationalSecurityReporter:
    """
    Professional Security Reporter - Generate comprehensive vulnerability reports.
    
    This professional reporting system provides:
    
    Professional Features:
    - Executive summary with risk assessment
    - Detailed vulnerability analysis with technical context
    - Step-by-step remediation guidance with code examples
    - Business impact analysis and risk assessment
    - Compliance mapping (OWASP Top 10, CWE, CVSS)
    - Professional formatting for security teams
    
    Report Formats:
    - Interactive HTML reports with professional styling
    - JSON reports for tool integration and automation
    - Markdown reports for documentation and sharing
    - Executive summary for management presentation
    - Technical deep-dive for development teams
    
    Professional Elements:
    - Attack scenario analysis
    - Secure coding examples and best practices
    - Risk prioritization and remediation planning
    - Compliance and regulatory guidance
    - Professional presentation for stakeholders
    """
    
    def __init__(self, config: Optional[SecurityReportConfig] = None):
        """Initialize the professional security reporter."""
        self.config = config or SecurityReportConfig()
        self.vulnerability_database = self._initialize_vulnerability_database()
        self.learning_resources = self._initialize_learning_resources()
        self.report_templates = self._initialize_report_templates()
        
        # Report metadata
        self.report_stats = {
            'reports_generated': 0,
            'vulnerabilities_processed': 0,
            'professional_content_served': 0
        }
    
    def _initialize_vulnerability_database(self) -> Dict[str, Dict[str, Any]]:
        """Initialize comprehensive vulnerability knowledge base."""
        return {
            VulnerabilityCategory.SQL_INJECTION.value: {
                "name": "SQL Injection",
                "description": "SQL injection occurs when user input is incorrectly filtered or insufficiently sanitized, allowing attackers to execute arbitrary SQL commands on the database.",
                "technical_explanation": """
SQL injection vulnerabilities arise when applications dynamically construct SQL queries using 
user-supplied input without proper validation or parameterization. Attackers can manipulate 
these inputs to alter the intended SQL logic, potentially gaining unauthorized access to data, 
modifying database contents, or executing administrative operations.

The vulnerability stems from the fundamental confusion between code and data in SQL queries. 
When user input is directly concatenated into SQL strings, the database engine cannot 
distinguish between the intended query structure and malicious input that changes the query's 
logic.
                """,
                "business_impact": """
SQL injection represents one of the most severe security vulnerabilities, with potential impacts including:

• **Data Breach**: Complete database compromise exposing sensitive customer information, financial records, and proprietary data
• **Financial Loss**: Direct monetary theft, regulatory fines (GDPR, CCPA), legal costs, and reputation damage
• **Business Disruption**: System downtime, data corruption, and loss of customer trust
• **Compliance Violations**: Failure to meet regulatory requirements (PCI DSS, HIPAA, SOX)
• **Competitive Disadvantage**: Loss of intellectual property and trade secrets
                """,
                "attack_scenarios": [
                    "Authentication Bypass: Attacker bypasses login mechanisms using '1'='1' or similar tautologies",
                    "Data Extraction: Systematic extraction of sensitive data using UNION-based attacks",
                    "Blind Inference: Information gathering through Boolean-based and time-based blind attacks",
                    "Database Fingerprinting: Identifying database type, version, and structure for targeted attacks",
                    "Privilege Escalation: Exploiting database functions to gain administrative access",
                    "Data Manipulation: Modifying or deleting critical business data",
                    "Second-Order Attacks: Stored malicious input executed in different application contexts"
                ],
                "owasp_category": "A03:2021 – Injection",
                "common_cwe_ids": ["CWE-89", "CWE-564", "CWE-943"],
                "cvss_base_score": 9.8,
                "exploitability": "high",
                "prevalence": "common",
                "detectability": "easy"
            },
            
            VulnerabilityCategory.XSS.value: {
                "name": "Cross-Site Scripting (XSS)",
                "description": "Cross-Site Scripting occurs when applications include unvalidated and unescaped user input as part of HTML output, allowing attackers to execute malicious scripts in victim browsers.",
                "technical_explanation": """
XSS vulnerabilities occur when web applications fail to properly validate, sanitize, or encode 
user-supplied data before including it in HTTP responses. This allows attackers to inject 
malicious scripts that execute in the context of other users' browsers, potentially stealing 
sensitive information, performing unauthorized actions, or compromising user accounts.

There are three main types of XSS:
1. **Reflected XSS**: Malicious script is reflected off the server in error messages or search results
2. **Stored XSS**: Malicious script is permanently stored on the server (database, file system)
3. **DOM-based XSS**: Vulnerability exists in client-side code that processes untrusted data
                """,
                "business_impact": """
XSS attacks can have significant business consequences:

• **Account Compromise**: Session hijacking and credential theft leading to unauthorized access
• **Data Theft**: Extraction of sensitive user information and personal data
• **Reputation Damage**: Loss of customer trust and brand credibility
• **Compliance Issues**: Violations of data protection regulations
• **Financial Impact**: Fraud, unauthorized transactions, and regulatory penalties
• **Operational Disruption**: Defacement and service availability issues
                """,
                "attack_scenarios": [
                    "Session Hijacking: Stealing authentication cookies to impersonate legitimate users",
                    "Credential Harvesting: Creating fake login forms to capture user credentials",
                    "Phishing Attacks: Redirecting users to malicious sites that mimic legitimate services",
                    "Malware Distribution: Serving malicious downloads through compromised websites",
                    "Defacement: Altering website appearance to damage reputation",
                    "Keylogging: Capturing user keystrokes to steal sensitive information",
                    "CSRF Token Theft: Bypassing CSRF protections by stealing anti-CSRF tokens"
                ],
                "owasp_category": "A03:2021 – Injection",
                "common_cwe_ids": ["CWE-79", "CWE-80", "CWE-83"],
                "cvss_base_score": 6.1,
                "exploitability": "medium",
                "prevalence": "widespread",
                "detectability": "easy"
            },
            
            VulnerabilityCategory.COMMAND_INJECTION.value: {
                "name": "Command Injection",
                "description": "Command injection occurs when applications execute system commands using unvalidated user input, allowing attackers to execute arbitrary commands on the host operating system.",
                "technical_explanation": """
Command injection vulnerabilities arise when applications construct system commands using 
user-supplied input without proper validation or sanitization. This allows attackers to 
inject additional commands or modify the intended command execution, potentially gaining 
full control over the host system.

The vulnerability typically occurs when applications use functions like system(), exec(), 
or shell_exec() with user-controlled data. Command separators (;, &&, ||, |) and command 
substitution operators (`, $()) can be used to chain additional commands or execute 
arbitrary code within the same execution context.
                """,
                "business_impact": """
Command injection represents a critical security risk with severe potential impacts:

• **Complete System Compromise**: Full control over the host operating system and infrastructure
• **Data Exfiltration**: Access to all files and databases on the compromised system
• **Lateral Movement**: Using compromised systems as launching points for further attacks
• **Service Disruption**: System downtime, data destruction, and operational impact
• **Compliance Violations**: Breach of security controls and regulatory requirements
• **Intellectual Property Theft**: Access to source code, algorithms, and trade secrets
                """,
                "attack_scenarios": [
                    "System Takeover: Executing administrative commands to gain full system control",
                    "Data Exfiltration: Using command utilities to access and transfer sensitive files",
                    "Backdoor Installation: Installing persistent access mechanisms for future exploitation",
                    "Network Reconnaissance: Scanning internal networks and identifying additional targets",
                    "Privilege Escalation: Exploiting system vulnerabilities to gain higher privileges",
                    "Log Manipulation: Altering system logs to hide attack traces",
                    "Resource Exploitation: Using compromised systems for cryptocurrency mining or botnets"
                ],
                "owasp_category": "A03:2021 – Injection",
                "common_cwe_ids": ["CWE-77", "CWE-78", "CWE-88"],
                "cvss_base_score": 9.8,
                "exploitability": "high",
                "prevalence": "uncommon",
                "detectability": "medium"
            },
            
            VulnerabilityCategory.DIRECTORY_TRAVERSAL.value: {
                "name": "Directory Traversal",
                "description": "Directory traversal vulnerabilities allow attackers to access files and directories outside the intended application scope by manipulating file path references.",
                "technical_explanation": """
Directory traversal (path traversal) vulnerabilities occur when applications use user-supplied 
input to construct file paths without proper validation. Attackers can use special characters 
like '../' (dot-dot-slash) to navigate outside the intended directory structure and access 
sensitive files on the server.

This vulnerability commonly affects file upload functionality, document viewers, and any 
feature that processes file paths. The attack exploits the way operating systems resolve 
relative paths, allowing traversal to parent directories and access to system files, 
configuration files, and other sensitive resources.
                """,
                "business_impact": """
Directory traversal vulnerabilities can lead to significant security breaches:

• **Sensitive File Exposure**: Access to configuration files, passwords, and system information
• **Source Code Disclosure**: Exposure of application logic and potential additional vulnerabilities
• **System Information Leakage**: Details about server configuration and infrastructure
• **Credential Theft**: Access to password files and authentication tokens
• **Compliance Violations**: Unauthorized access to regulated data and information
• **Intellectual Property Loss**: Exposure of proprietary algorithms and business logic
                """,
                "attack_scenarios": [
                    "Configuration File Access: Reading database credentials from configuration files",
                    "Password File Extraction: Accessing system password files (/etc/passwd, /etc/shadow)",
                    "Log File Analysis: Examining log files for sensitive information and attack vectors",
                    "Application Source Review: Analyzing source code for additional vulnerabilities",
                    "SSL Certificate Theft: Accessing private keys and certificates",
                    "Backup File Discovery: Finding and accessing backup files with sensitive data",
                    "System Reconnaissance: Gathering information about system architecture and services"
                ],
                "owasp_category": "A01:2021 – Broken Access Control",
                "common_cwe_ids": ["CWE-22", "CWE-23", "CWE-36"],
                "cvss_base_score": 7.5,
                "exploitability": "medium",
                "prevalence": "common",
                "detectability": "easy"
            },
            
            VulnerabilityCategory.SECURITY_HEADERS.value: {
                "name": "Missing Security Headers",
                "description": "Security headers are HTTP response headers that help protect web applications from various attacks by instructing browsers how to handle content and enforce security policies.",
                "technical_explanation": """
Security headers provide defense-in-depth protection by leveraging browser security features. 
When applications fail to implement proper security headers, they miss critical opportunities 
to protect users from various attacks including XSS, clickjacking, MITM attacks, and 
information disclosure.

Key security headers include:
• Content-Security-Policy (CSP): Prevents XSS and data injection attacks
• X-Frame-Options: Protects against clickjacking attacks
• Strict-Transport-Security (HSTS): Enforces HTTPS connections
• X-Content-Type-Options: Prevents MIME type sniffing attacks
• Referrer-Policy: Controls referrer information leakage
                """,
                "business_impact": """
Missing security headers expose applications to various risks:

• **Increased Attack Surface**: Vulnerability to clickjacking, XSS, and injection attacks
• **Data Leakage**: Uncontrolled referrer information and content type sniffing
• **Man-in-the-Middle Attacks**: Lack of transport security enforcement
• **Compliance Issues**: Failure to implement security best practices
• **Brand Damage**: Security incidents due to preventable vulnerabilities
• **User Trust**: Reduced confidence in application security
                """,
                "attack_scenarios": [
                    "Clickjacking: Embedding legitimate sites in malicious frames to trick users",
                    "XSS Exploitation: Bypassing weak content security policies",
                    "MITM Attacks: Intercepting traffic due to lack of transport security",
                    "Content Sniffing: Exploiting browser MIME type confusion",
                    "Information Disclosure: Leaking sensitive data through referrer headers",
                    "Cache Poisoning: Manipulating cached content without proper headers"
                ],
                "owasp_category": "A05:2021 – Security Misconfiguration",
                "common_cwe_ids": ["CWE-16", "CWE-693", "CWE-1021"],
                "cvss_base_score": 4.3,
                "exploitability": "low",
                "prevalence": "widespread",
                "detectability": "easy"
            }
        }
    
    def _initialize_learning_resources(self) -> Dict[str, List[LearningResource]]:
        """Initialize curated learning resources for each vulnerability type."""
        return {
            VulnerabilityCategory.SQL_INJECTION.value: [
                LearningResource(
                    title="OWASP SQL Injection Prevention Cheat Sheet",
                    description="Comprehensive guide to preventing SQL injection vulnerabilities",
                    url="https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                    resource_type="documentation",
                    difficulty="intermediate"
                ),
                LearningResource(
                    title="PortSwigger Web Security Academy - SQL Injection",
                    description="Interactive labs and tutorials on SQL injection attacks and defenses",
                    url="https://portswigger.net/web-security/sql-injection",
                    resource_type="course",
                    difficulty="beginner"
                ),
                LearningResource(
                    title="SQLMap Documentation",
                    description="Advanced SQL injection exploitation tool documentation",
                    url="https://sqlmap.org/",
                    resource_type="tool",
                    difficulty="advanced"
                )
            ],
            
            VulnerabilityCategory.XSS.value: [
                LearningResource(
                    title="OWASP XSS Prevention Cheat Sheet",
                    description="Detailed guidance on preventing cross-site scripting vulnerabilities",
                    url="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
                    resource_type="documentation",
                    difficulty="intermediate"
                ),
                LearningResource(
                    title="Content Security Policy (CSP) Reference",
                    description="Complete guide to implementing and configuring CSP headers",
                    url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy",
                    resource_type="documentation",
                    difficulty="intermediate"
                ),
                LearningResource(
                    title="XSS Filter Evasion Cheat Sheet",
                    description="Understanding common XSS bypass techniques for better defense",
                    url="https://owasp.org/www-community/xss-filter-evasion-cheatsheet",
                    resource_type="documentation",
                    difficulty="advanced"
                )
            ],
            
            VulnerabilityCategory.COMMAND_INJECTION.value: [
                LearningResource(
                    title="OWASP Command Injection Defense",
                    description="Best practices for preventing command injection vulnerabilities",
                    url="https://owasp.org/www-community/attacks/Command_Injection",
                    resource_type="documentation",
                    difficulty="intermediate"
                ),
                LearningResource(
                    title="Input Validation and Sanitization Guide",
                    description="Comprehensive approach to secure input handling",
                    url="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html",
                    resource_type="documentation",
                    difficulty="beginner"
                )
            ],
            
            VulnerabilityCategory.DIRECTORY_TRAVERSAL.value: [
                LearningResource(
                    title="Path Traversal Prevention Techniques",
                    description="Methods to prevent directory traversal vulnerabilities",
                    url="https://owasp.org/www-community/attacks/Path_Traversal",
                    resource_type="documentation",
                    difficulty="intermediate"
                ),
                LearningResource(
                    title="Secure File Handling Best Practices",
                    description="Guidelines for secure file operations in web applications",
                    url="https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html",
                    resource_type="documentation",
                    difficulty="intermediate"
                )
            ],
            
            VulnerabilityCategory.SECURITY_HEADERS.value: [
                LearningResource(
                    title="OWASP Secure Headers Project",
                    description="Comprehensive guide to implementing security headers",
                    url="https://owasp.org/www-project-secure-headers/",
                    resource_type="documentation",
                    difficulty="beginner"
                ),
                LearningResource(
                    title="Security Headers Quick Reference",
                    description="Fast reference for all important security headers",
                    url="https://securityheaders.com/",
                    resource_type="tool",
                    difficulty="beginner"
                ),
                LearningResource(
                    title="Content Security Policy Generator",
                    description="Interactive tool for generating CSP policies",
                    url="https://report-uri.com/home/generate",
                    resource_type="tool",
                    difficulty="intermediate"
                )
            ]
        }
    
    def _initialize_report_templates(self) -> Dict[str, str]:
        """Initialize modern, professional HTML templates for security reports."""
        return {
            "html_header": '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Assessment Report</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6; 
            color: #1f2937; 
            background: #f8fafc;
        }
        
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 0 20px;
        }
        
        /* Header */
        .header { 
            background: linear-gradient(135deg, #1e293b 0%, #334155 100%); 
            color: white; 
            padding: 40px 0; 
            margin-bottom: 40px;
        }
        
        .header h1 { 
            font-size: 2.25rem; 
            font-weight: 700; 
            margin-bottom: 8px;
            letter-spacing: -0.025em;
        }
        
        .header p { 
            font-size: 1.1rem; 
            opacity: 0.9; 
            font-weight: 300;
        }
        
        /* Navigation */
        .nav { 
            background: white; 
            padding: 16px 0; 
            margin-bottom: 32px; 
            border-radius: 12px; 
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            border: 1px solid #e2e8f0;
        }
        
        .nav ul { 
            list-style: none; 
            display: flex; 
            flex-wrap: wrap; 
            gap: 24px; 
            justify-content: center;
        }
        
        .nav a { 
            text-decoration: none; 
            color: #475569; 
            padding: 8px 16px; 
            border-radius: 8px; 
            transition: all 0.2s ease;
            font-weight: 500;
        }
        
        .nav a:hover { 
            background: #f1f5f9; 
            color: #0f172a;
        }
        
        /* Cards */
        .card { 
            background: white; 
            border-radius: 16px; 
            box-shadow: 0 1px 3px rgba(0,0,0,0.1); 
            margin-bottom: 24px; 
            overflow: hidden;
            border: 1px solid #e2e8f0;
        }
        
        .card-header { 
            padding: 24px; 
            background: #f8fafc; 
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .card-body { 
            padding: 24px; 
        }
        
        .card-title { 
            font-size: 1.5rem; 
            font-weight: 600; 
            color: #0f172a;
            margin: 0;
        }
        
        /* Severity Badges */
        .severity { 
            padding: 6px 12px; 
            border-radius: 8px; 
            font-size: 0.875rem; 
            font-weight: 600; 
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        
        .severity.critical { 
            background: #fef2f2; 
            color: #dc2626; 
            border: 1px solid #fecaca;
        }
        
        .severity.high { 
            background: #fff7ed; 
            color: #ea580c; 
            border: 1px solid #fed7aa;
        }
        
        .severity.medium { 
            background: #fffbeb; 
            color: #d97706; 
            border: 1px solid #fef3c7;
        }
        
        .severity.low { 
            background: #f0fdf4; 
            color: #059669; 
            border: 1px solid #bbf7d0;
        }
        
        .severity.info { 
            background: #eff6ff; 
            color: #0284c7; 
            border: 1px solid #bfdbfe;
        }
        
        /* Info Sections */
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 16px;
            margin: 20px 0;
        }
        
        .info-item {
            background: #f8fafc;
            padding: 16px;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }
        
        .info-label {
            font-weight: 600;
            color: #475569;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 4px;
        }
        
        .info-value {
            color: #0f172a;
            font-weight: 500;
        }
        
        /* Code Blocks */
        .code-section {
            margin: 24px 0;
        }
        
        .code-block { 
            background: #1e293b; 
            border-radius: 8px; 
            padding: 20px; 
            margin: 12px 0;
            overflow-x: auto;
        }
        
        .code-block pre { 
            font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace; 
            font-size: 0.875rem; 
            color: #e2e8f0;
            overflow-x: auto;
        }
        
        .code-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .code-title {
            font-weight: 600;
            font-size: 0.875rem;
        }
        
        .code-vulnerable .code-title { color: #ef4444; }
        .code-secure .code-title { color: #10b981; }
        
        .code-tag {
            font-size: 0.75rem;
            padding: 2px 8px;
            border-radius: 4px;
            font-weight: 500;
        }
        
        .code-vulnerable .code-tag {
            background: #fef2f2;
            color: #dc2626;
        }
        
        .code-secure .code-tag {
            background: #f0fdf4;
            color: #059669;
        }
        
        /* Content Sections */
        .content-section { 
            background: #f8fafc; 
            border-radius: 12px; 
            padding: 24px; 
            margin: 20px 0;
            border: 1px solid #e2e8f0;
        }
        
        .content-section h4 { 
            color: #0f172a; 
            margin-bottom: 12px;
            font-size: 1.125rem;
            font-weight: 600;
        }
        
        .content-section p,
        .content-section li {
            color: #475569;
        }
        
        /* Risk Matrix */
        .risk-matrix { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 16px; 
            margin: 24px 0; 
        }
        
        .risk-cell { 
            padding: 20px; 
            text-align: center; 
            border-radius: 12px; 
            font-weight: 600;
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        /* Tables */
        .details-table {
            width: 100%;
            border-collapse: collapse;
            margin: 16px 0;
        }
        
        .details-table th,
        .details-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .details-table th {
            background: #f8fafc;
            font-weight: 600;
            color: #374151;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .container { padding: 0 16px; }
            .header h1 { font-size: 1.875rem; }
            .nav ul { flex-direction: column; gap: 8px; }
            .risk-matrix { grid-template-columns: repeat(2, 1fr); }
            .info-grid { grid-template-columns: 1fr; }
        }
        
        /* Print Styles */
        @media print {
            .nav { display: none; }
            .card { box-shadow: none; border: 1px solid #ddd; page-break-inside: avoid; }
            .header { background: #334155 !important; }
        }
        
        /* Animations */
        .card {
            animation: fadeInUp 0.5s ease-out;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
            ''',
            
            "html_footer": '''
    <footer style="background: #1e293b; color: white; padding: 40px 0; margin-top: 60px;">
        <div class="container" style="text-align: center;">
            <p style="font-size: 1.1rem; font-weight: 500; margin-bottom: 8px;">
                Security Assessment Report
            </p>
            <p style="font-size: 0.875rem; opacity: 0.7;">
                Generated by ReconScan Professional Security Framework
            </p>
            <p style="font-size: 0.75rem; margin-top: 16px; opacity: 0.6;">
                This report contains confidential security information. Handle in accordance with your organization's security policies.
            </p>
        </div>
    </footer>
    
    <script>
        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
        
        // Add print functionality
        function printReport() {
            window.print();
        }
        
        // Add export functionality (if needed)
        function exportToPDF() {
            window.print();
        }
    </script>
</body>
</html>
            '''
        }
    
    def generate_educational_report(self, 
                                  vulnerabilities: List[Dict[str, Any]], 
                                  scan_metadata: Dict[str, Any],
                                  output_path: str,
                                  format_type: str = "html") -> bool:
        """Generate comprehensive professional security report."""
        
        try:
            # Convert raw vulnerabilities to professional format
            enhanced_vulns = self._enhance_vulnerabilities(vulnerabilities)
            
            # Generate report based on format
            if format_type.lower() == "html":
                success = self._generate_html_report(enhanced_vulns, scan_metadata, output_path)
            elif format_type.lower() == "json":
                success = self._generate_json_report(enhanced_vulns, scan_metadata, output_path)
            elif format_type.lower() == "markdown":
                success = self._generate_markdown_report(enhanced_vulns, scan_metadata, output_path)
            else:
                return False
            
            if success:
                self.report_stats['reports_generated'] += 1
                self.report_stats['vulnerabilities_processed'] += len(enhanced_vulns)
                self.report_stats['professional_content_served'] += len(enhanced_vulns)
            
            return success
            
        except Exception as e:
            return False
    
    def _enhance_vulnerabilities(self, vulnerabilities: List[Dict[str, Any]]) -> List[EducationalVulnerability]:
        """Convert raw vulnerabilities into educational format with learning content."""
        enhanced_vulns = []
        
        for i, vuln in enumerate(vulnerabilities):
            try:
                # Determine vulnerability category
                category = self._categorize_vulnerability(vuln)
                vuln_info = self.vulnerability_database.get(category.value, {})
                
                # Create educational vulnerability
                educational_vuln = EducationalVulnerability(
                    id=f"VULN-{i+1:03d}",
                    name=vuln_info.get("name", "Unknown Vulnerability"),
                    category=category,
                    severity=self._determine_severity(vuln),
                    confidence=vuln.get("confidence", 0.8),
                    
                    # Technical details
                    url=vuln.get("url", ""),
                    parameter=vuln.get("parameter", ""),
                    method=vuln.get("method", "GET"),
                    payload=vuln.get("payload", ""),
                    evidence=vuln.get("evidence", ""),
                    
                    # Educational content
                    description=vuln_info.get("description", ""),
                    technical_explanation=vuln_info.get("technical_explanation", ""),
                    business_impact=vuln_info.get("business_impact", ""),
                    attack_scenarios=vuln_info.get("attack_scenarios", []),
                    remediation_steps=self._generate_remediation_steps(category),
                    code_examples=self._generate_code_examples(category),
                    learning_resources=self.learning_resources.get(category.value, []),
                    
                    # Compliance mapping
                    owasp_category=vuln_info.get("owasp_category", ""),
                    cwe_id=", ".join(vuln_info.get("common_cwe_ids", [])),
                    cvss_score=vuln_info.get("cvss_base_score", 0.0),
                    
                    # Risk assessment
                    exploitability=vuln_info.get("exploitability", "medium"),
                    prevalence=vuln_info.get("prevalence", "common"),
                    detectability=vuln_info.get("detectability", "easy"),
                    
                    # Learning elements - only generate if enabled
                    knowledge_check=self._generate_knowledge_check(category) if self.config.include_knowledge_checks else {},
                    hands_on_exercise=self._generate_hands_on_exercise(category) if self.config.include_knowledge_checks else None
                )
                
                enhanced_vulns.append(educational_vuln)
                
            except Exception as e:
                print(f"   ⚠️  Error enhancing vulnerability {i+1}: {e}")
                continue
        
        return enhanced_vulns
    
    def _categorize_vulnerability(self, vuln: Dict[str, Any]) -> VulnerabilityCategory:
        """Categorize vulnerability based on type or payload."""
        vuln_type = vuln.get("type", "").lower()
        payload = vuln.get("payload", "").lower()
        
        if "sql" in vuln_type or any(keyword in payload for keyword in ["'", "union", "select", "and", "or"]):
            return VulnerabilityCategory.SQL_INJECTION
        elif "xss" in vuln_type or any(keyword in payload for keyword in ["<script", "javascript:", "alert("]):
            return VulnerabilityCategory.XSS
        elif "command" in vuln_type or any(keyword in payload for keyword in [";", "&&", "||", "|", "`"]):
            return VulnerabilityCategory.COMMAND_INJECTION
        elif "directory" in vuln_type or "traversal" in vuln_type or "../" in payload:
            return VulnerabilityCategory.DIRECTORY_TRAVERSAL
        elif "header" in vuln_type or "security" in vuln_type:
            return VulnerabilityCategory.SECURITY_HEADERS
        else:
            return VulnerabilityCategory.INFORMATION_DISCLOSURE
    
    def _determine_severity(self, vuln: Dict[str, Any]) -> SeverityLevel:
        """Determine vulnerability severity based on type and impact."""
        vuln_type = vuln.get("type", "").lower()
        
        if "sql" in vuln_type or "command" in vuln_type:
            return SeverityLevel.CRITICAL
        elif "xss" in vuln_type or "traversal" in vuln_type:
            return SeverityLevel.HIGH
        elif "header" in vuln_type:
            return SeverityLevel.MEDIUM
        else:
            return SeverityLevel.LOW
    
    def _generate_remediation_steps(self, category: VulnerabilityCategory) -> List[RemediationStep]:
        """Generate detailed remediation steps for vulnerability category."""
        remediation_map = {
            VulnerabilityCategory.SQL_INJECTION: [
                RemediationStep(1, "Implement Parameterized Queries", 
                              "Use prepared statements or parameterized queries to separate SQL logic from data",
                              priority="critical", effort="medium"),
                RemediationStep(2, "Input Validation", 
                              "Validate and sanitize all user inputs before processing",
                              priority="high", effort="low"),
                RemediationStep(3, "Principle of Least Privilege", 
                              "Configure database user with minimal required permissions",
                              priority="high", effort="medium"),
                RemediationStep(4, "Error Handling", 
                              "Implement proper error handling to prevent information disclosure",
                              priority="medium", effort="low")
            ],
            VulnerabilityCategory.XSS: [
                RemediationStep(1, "Output Encoding", 
                              "Encode all user-supplied data when rendering in HTML context",
                              priority="critical", effort="low"),
                RemediationStep(2, "Content Security Policy", 
                              "Implement CSP headers to prevent malicious script execution",
                              priority="high", effort="medium"),
                RemediationStep(3, "Input Validation", 
                              "Validate and sanitize user inputs on both client and server side",
                              priority="high", effort="medium"),
                RemediationStep(4, "HttpOnly Cookies", 
                              "Set HttpOnly flag on session cookies to prevent XSS cookie theft",
                              priority="medium", effort="low")
            ],
            VulnerabilityCategory.COMMAND_INJECTION: [
                RemediationStep(1, "Avoid System Commands", 
                              "Use safe APIs instead of executing system commands",
                              priority="critical", effort="high"),
                RemediationStep(2, "Input Sanitization", 
                              "Whitelist allowed characters and escape shell metacharacters",
                              priority="critical", effort="medium"),
                RemediationStep(3, "Subprocess Security", 
                              "Use secure subprocess execution with proper argument handling",
                              priority="high", effort="medium")
            ],
            VulnerabilityCategory.DIRECTORY_TRAVERSAL: [
                RemediationStep(1, "Path Validation", 
                              "Validate and canonicalize file paths before processing",
                              priority="critical", effort="medium"),
                RemediationStep(2, "Whitelist Approach", 
                              "Use whitelist of allowed files/directories instead of blacklist",
                              priority="high", effort="medium"),
                RemediationStep(3, "Chroot Jail", 
                              "Implement chroot jail to restrict file system access",
                              priority="medium", effort="high")
            ],
            VulnerabilityCategory.SECURITY_HEADERS: [
                RemediationStep(1, "Implement Security Headers", 
                              "Add missing security headers to HTTP responses",
                              priority="high", effort="low"),
                RemediationStep(2, "Configure CSP", 
                              "Set up Content Security Policy appropriate for your application",
                              priority="high", effort="medium"),
                RemediationStep(3, "Enable HSTS", 
                              "Configure HTTP Strict Transport Security for HTTPS enforcement",
                              priority="medium", effort="low")
            ]
        }
        
        return remediation_map.get(category, [])
    
    def _generate_code_examples(self, category: VulnerabilityCategory) -> List[CodeExample]:
        """Generate code examples showing vulnerable vs secure implementations."""
        examples_map = {
            VulnerabilityCategory.SQL_INJECTION: [
                CodeExample(
                    language="python",
                    vulnerable_code='''# VULNERABLE CODE
query = "SELECT * FROM users WHERE id = " + user_id
cursor.execute(query)''',
                    secure_code='''# SECURE CODE
query = "SELECT * FROM users WHERE id = %s"
cursor.execute(query, (user_id,))''',
                    explanation="Use parameterized queries to prevent SQL injection"
                ),
                CodeExample(
                    language="java",
                    vulnerable_code='''// VULNERABLE CODE
String query = "SELECT * FROM users WHERE name = '" + userName + "'";
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery(query);''',
                    secure_code='''// SECURE CODE
String query = "SELECT * FROM users WHERE name = ?";
PreparedStatement pstmt = connection.prepareStatement(query);
pstmt.setString(1, userName);
ResultSet rs = pstmt.executeQuery();''',
                    explanation="Use PreparedStatement to safely handle user input"
                )
            ],
            VulnerabilityCategory.XSS: [
                CodeExample(
                    language="javascript",
                    vulnerable_code='''// VULNERABLE CODE
document.getElementById("output").innerHTML = userInput;''',
                    secure_code='''// SECURE CODE
document.getElementById("output").textContent = userInput;
// OR use proper HTML encoding
document.getElementById("output").innerHTML = escapeHtml(userInput);''',
                    explanation="Use textContent or proper HTML encoding to prevent XSS"
                ),
                CodeExample(
                    language="php",
                    vulnerable_code='''<!-- VULNERABLE CODE -->
<div><?php echo $_GET['message']; ?></div>''',
                    secure_code='''<!-- SECURE CODE -->
<div><?php echo htmlspecialchars($_GET['message'], ENT_QUOTES, 'UTF-8'); ?></div>''',
                    explanation="Always encode output to prevent script injection"
                )
            ],
            VulnerabilityCategory.COMMAND_INJECTION: [
                CodeExample(
                    language="python",
                    vulnerable_code='''# VULNERABLE CODE
import os
filename = request.form['filename']
os.system(f"cat {filename}")''',
                    secure_code='''# SECURE CODE
import subprocess
filename = request.form['filename']
# Validate filename first
if not re.match(r'^[a-zA-Z0-9._-]+$', filename):
    raise ValueError("Invalid filename")
subprocess.run(['cat', filename], check=True)''',
                    explanation="Use subprocess with argument lists and validate inputs"
                )
            ]
        }
        
        return examples_map.get(category, [])
    
    def _generate_knowledge_check(self, category: VulnerabilityCategory) -> Dict[str, Any]:
        """Generate knowledge check questions for learning validation."""
        knowledge_checks = {
            VulnerabilityCategory.SQL_INJECTION: {
                "question": "What is the primary defense against SQL injection?",
                "options": [
                    "Input validation only",
                    "Parameterized queries/prepared statements",
                    "Escaping special characters",
                    "Using stored procedures"
                ],
                "correct": 1,
                "explanation": "Parameterized queries separate SQL logic from data, preventing injection attacks."
            },
            VulnerabilityCategory.XSS: {
                "question": "Which header helps prevent XSS attacks?",
                "options": [
                    "X-Frame-Options",
                    "Content-Security-Policy",
                    "Strict-Transport-Security",
                    "X-Content-Type-Options"
                ],
                "correct": 1,
                "explanation": "Content-Security-Policy controls resource loading and script execution."
            }
        }
        
        return knowledge_checks.get(category, {})
    
    def _generate_hands_on_exercise(self, category: VulnerabilityCategory) -> Optional[str]:
        """Generate hands-on exercise for practical learning."""
        exercises = {
            VulnerabilityCategory.SQL_INJECTION: """
Try this exercise:
1. Set up a simple web application with a login form
2. Implement the vulnerable version using string concatenation
3. Test with payload: admin' OR '1'='1
4. Implement the secure version using parameterized queries
5. Verify the attack no longer works
""",
            VulnerabilityCategory.XSS: """
Try this exercise:
1. Create an HTML page with a comment form
2. Display user comments without encoding
3. Test with payload: <script>alert('XSS')</script>
4. Implement proper output encoding
5. Add Content-Security-Policy header
"""
        }
        
        return exercises.get(category)
    
    def _generate_html_report(self, vulnerabilities: List[EducationalVulnerability], 
                            metadata: Dict[str, Any], output_path: str) -> bool:
        """Generate comprehensive professional HTML security report."""
        try:
            html_content = self.report_templates["html_header"]
            
            # Add report header
            html_content += f'''
<div class="header">
    <div class="container">
        <h1>Security Assessment Report</h1>
        <p>Professional vulnerability analysis and remediation guidance</p>
    </div>
</div>

<div class="container">
    <!-- Navigation -->
    <nav class="nav">
        <ul>
            <li><a href="#executive-summary">Executive Summary</a></li>
            <li><a href="#vulnerabilities">Vulnerabilities</a></li>
            <li><a href="#remediation">Remediation</a></li>
            <li><a href="#recommendations">Recommendations</a></li>
        </ul>
    </nav>
    
    <!-- Executive Summary -->
    <section id="executive-summary" class="card">
        <div class="card-header">
            <h2 class="card-title">Executive Summary</h2>
        </div>
        <div class="card-body">
            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">Target</div>
                    <div class="info-value">{metadata.get('target', 'Unknown')}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Scan Date</div>
                    <div class="info-value">{metadata.get('scan_date', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Total Findings</div>
                    <div class="info-value">{len(vulnerabilities)}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Risk Level</div>
                    <div class="info-value">{'High' if any(v.severity in [SeverityLevel.CRITICAL, SeverityLevel.HIGH] for v in vulnerabilities) else 'Medium'}</div>
                </div>
            </div>
            
            <div style="margin: 32px 0;">
                <h3 style="margin-bottom: 16px; color: #374151; font-size: 1.25rem;">Risk Distribution</h3>
                <div class="risk-matrix">
                    <div class="risk-cell" style="background: #fef2f2; color: #dc2626;">
                        <div style="font-size: 1.5rem; margin-bottom: 4px;">{sum(1 for v in vulnerabilities if v.severity == SeverityLevel.CRITICAL)}</div>
                        <div style="font-size: 0.875rem;">Critical</div>
                    </div>
                    <div class="risk-cell" style="background: #fff7ed; color: #ea580c;">
                        <div style="font-size: 1.5rem; margin-bottom: 4px;">{sum(1 for v in vulnerabilities if v.severity == SeverityLevel.HIGH)}</div>
                        <div style="font-size: 0.875rem;">High</div>
                    </div>
                    <div class="risk-cell" style="background: #fffbeb; color: #d97706;">
                        <div style="font-size: 1.5rem; margin-bottom: 4px;">{sum(1 for v in vulnerabilities if v.severity == SeverityLevel.MEDIUM)}</div>
                        <div style="font-size: 0.875rem;">Medium</div>
                    </div>
                    <div class="risk-cell" style="background: #f0fdf4; color: #059669;">
                        <div style="font-size: 1.5rem; margin-bottom: 4px;">{sum(1 for v in vulnerabilities if v.severity == SeverityLevel.LOW)}</div>
                        <div style="font-size: 0.875rem;">Low</div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
    <!-- Vulnerabilities Section -->
    <section id="vulnerabilities">
        <h2 style="margin: 40px 0 24px 0; color: #0f172a; font-size: 1.875rem; font-weight: 700;">Vulnerability Details</h2>
'''
            
            # Add each vulnerability with professional content
            for vuln in vulnerabilities:
                html_content += self._generate_vulnerability_html(vuln)
            
            html_content += '''
    </section>
    
    <!-- Recommendations -->
    <section id="recommendations" class="card">
        <div class="card-header">
            <h2 class="card-title">Security Recommendations</h2>
        </div>
        <div class="card-body">
            <div class="content-section">
                <h4>Immediate Actions Required</h4>
                <ul style="margin-left: 20px; color: #475569;">
                    <li>Address all Critical and High severity vulnerabilities immediately</li>
                    <li>Implement input validation and output encoding across all applications</li>
                    <li>Deploy Web Application Firewall (WAF) for additional protection</li>
                    <li>Conduct regular security assessments and penetration testing</li>
                </ul>
            </div>
            
            <div class="content-section">
                <h4>Long-term Security Strategy</h4>
                <ul style="margin-left: 20px; color: #475569;">
                    <li>Integrate security testing into CI/CD pipeline</li>
                    <li>Provide security training for development teams</li>
                    <li>Implement secure coding standards and review processes</li>
                    <li>Establish incident response and vulnerability management processes</li>
                </ul>
            </div>
        </div>
    </section>
</div>
'''
            
            html_content += self.report_templates["html_footer"]
            
            # Write to file
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            return True
            
        except Exception as e:
            print(f"Error generating HTML report: {e}")
            return False
    
    def _generate_vulnerability_html(self, vuln: EducationalVulnerability) -> str:
        """Generate professional HTML for a single vulnerability."""
        severity_class = vuln.severity.name.lower()
        
        return f'''
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">{vuln.name}</h3>
                <span class="severity {severity_class}">{vuln.severity.name}</span>
            </div>
            <div class="card-body">
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">Location</div>
                        <div class="info-value">{vuln.url}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Parameter</div>
                        <div class="info-value">{vuln.parameter}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Method</div>
                        <div class="info-value">{vuln.method}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Confidence</div>
                        <div class="info-value">{vuln.confidence:.1%}</div>
                    </div>
                </div>
                
                <table class="details-table">
                    <tr>
                        <th>OWASP Category</th>
                        <td>{vuln.owasp_category}</td>
                    </tr>
                    <tr>
                        <th>CWE Reference</th>
                        <td>{vuln.cwe_id}</td>
                    </tr>
                    <tr>
                        <th>CVSS Score</th>
                        <td>{vuln.cvss_score:.1f}/10.0</td>
                    </tr>
                    <tr>
                        <th>Exploitability</th>
                        <td style="text-transform: capitalize;">{vuln.exploitability}</td>
                    </tr>
                </table>
                
                <div class="content-section">
                    <h4>Vulnerability Description</h4>
                    <p>{vuln.description}</p>
                </div>
                
                <div class="content-section">
                    <h4>Technical Details</h4>
                    <div style="white-space: pre-line;">{vuln.technical_explanation}</div>
                </div>
                
                <div class="content-section">
                    <h4>Business Impact</h4>
                    <div style="white-space: pre-line;">{vuln.business_impact}</div>
                </div>
                
                <div class="content-section">
                    <h4>Remediation Steps</h4>
                    <ol style="margin-left: 20px; color: #475569;">
                        {''.join(f'<li style="margin-bottom: 8px;"><strong>{step.title}:</strong> {step.description}</li>' for step in vuln.remediation_steps)}
                    </ol>
                </div>
                
                {''.join(f'''
                <div class="code-section">
                    <div class="code-vulnerable">
                        <div class="code-header">
                            <span class="code-title">Vulnerable Code ({example.language})</span>
                            <span class="code-tag">VULNERABLE</span>
                        </div>
                        <div class="code-block">
                            <pre>{html.escape(example.vulnerable_code)}</pre>
                        </div>
                    </div>
                    <div class="code-secure">
                        <div class="code-header">
                            <span class="code-title">Secure Implementation ({example.language})</span>
                            <span class="code-tag">SECURE</span>
                        </div>
                        <div class="code-block">
                            <pre>{html.escape(example.secure_code)}</pre>
                        </div>
                        <p style="margin-top: 12px; color: #475569; font-style: italic;">{example.explanation}</p>
                    </div>
                </div>
                ''' for example in vuln.code_examples)}
                
                {f'''
                <div class="content-section">
                    <h4>Additional Resources</h4>
                    <ul style="margin-left: 20px;">
                        {''.join(f'<li style="margin-bottom: 4px;"><a href="{resource.url}" target="_blank" style="color: #0ea5e9; text-decoration: none;">{resource.title}</a> - {resource.description}</li>' 
                                for resource in vuln.learning_resources)}
                    </ul>
                </div>
                ''' if vuln.learning_resources else ''}
            </div>
        </div>
        '''