"""
ReconScan Directory Traversal Scanner

Directory traversal vulnerability detection module.
"""

import urllib.parse
from ..payloads.directory_traversal_payloads import DirectoryTraversalPayloads

class DirectoryTraversalScanner:
    """Directory traversal vulnerability scanner."""
    
    def __init__(self):
        """Initialize directory traversal scanner."""
        # Initialize payload library
        self.payload_library = DirectoryTraversalPayloads()
        
        # Get payloads from library (using medium severity by default)
        self.payloads = self.payload_library.get_targeted_payloads('medium')
        
        # Get success indicators from library
        self.traversal_indicators = self.payload_library.get_success_indicators()
    
    async def scan(self, session, target, verbose=True):
        """Perform directory traversal vulnerability scan."""
        if verbose:
            print("  \033[1;32m→\033[0m Testing directory traversal...")
        
        vulnerabilities = []
        vulnerabilities_found = 0
        
        for payload in self.payloads:
            try:
                test_url = f"{target}?path={urllib.parse.quote(payload)}"
                
                async with session.get(test_url) as response:
                    content = await response.text()
                    
                    if any(indicator in content for indicator in self.traversal_indicators):
                        vulnerability = {
                            'type': 'Directory Traversal',
                            'severity': 'High',
                            'url': test_url,
                            'payload': payload,
                            'description': 'Directory traversal vulnerability detected'
                        }
                        vulnerabilities.append(vulnerability)
                        vulnerabilities_found += 1
                        if verbose:
                            print(f"     Directory traversal found: {payload}")
                        break
                        
            except Exception as e:
                if verbose:
                    print(f"    ! Error testing payload '{payload}': {str(e)}")
                continue
        
        if verbose and vulnerabilities_found == 0:
            print("    ✓ No directory traversal vulnerabilities detected")
        
        return vulnerabilities 